#!/bin/bash
# A timer that makes an audible sound after the time's up.
#
# author: andreasl

show_usage() {
    echo "Usage: ${0##*/} [-h <hours>] [-m <minutes>] [-s <seconds>] [-a] [--quiet]"
    echo "  -h, --hours      Set hours"
    echo "  -m, --minutes    Set minutes"
    echo "  -s, --seconds    Set seconds"
    echo "  -a, --alt-melody Use alternative melody"
    echo "  -q, --quiet      Quiet mode"
    echo "  --help           Show this help"
}

[ "$#" -eq 0 ] && {
    show_usage
    exit 1
}

hours=0
minutes=0
seconds=0
quiet=false
alt_melody=false
while [ "$#" -gt 0 ]; do
    case "$1" in
    -h | --hours)
        hours="$2"
        shift
        ;;
    -m | --minutes)
        minutes="$2"
        shift
        ;;
    -s | --seconds)
        seconds="$2"
        shift
        ;;
    -q | --quiet)
        quiet=true
        ;;
    -a | --alt-melody)
        echo !!!
        alt_melody=true
        ;;
    --help)
        show_usage
        exit 0
        ;;
    *)
        [ "$hours" -eq 0 ] && [ "$minutes" -eq 0 ] && [ "$seconds" -eq 0 ] && seconds="$1"
        ;;
    esac
    shift
done

print() { [ "$quiet" != true ] && printf "%b" "$1"; }

remaining=$((hours * 3600 + minutes * 60 + seconds))
while [ "$remaining" -ge 5 ]; do
    print "${remaining}..."
    sleep 5
    remaining=$((remaining - 5))
done
print "${remaining}..."
sleep "$remaining"

notes=(440 554 659 880 659 554 440)
[ "$alt_melody" == true ] && notes=(880 698 587 523 587)

print "Time's up!\n"
for f in "${notes[@]}"; do
    timeout 0.2 speaker-test --period 10 --test sine --frequency "$f" >/dev/null 2>&1
done

exit 0
